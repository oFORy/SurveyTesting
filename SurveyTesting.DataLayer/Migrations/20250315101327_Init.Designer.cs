// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SurveyTesting.DataLayer;

#nullable disable

namespace SurveyTesting.DataLayer.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250315101327_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SurveyTesting.DataLayer.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeleteDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("Id", "QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7523), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 1,
                            QuestionId = 1,
                            Text = "Москва"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7525), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 2,
                            QuestionId = 1,
                            Text = "Московская область"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7527), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 3,
                            QuestionId = 1,
                            Text = "Санкт-Петербург"
                        },
                        new
                        {
                            Id = 4,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7528), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 4,
                            QuestionId = 1,
                            Text = "Ленинградская область"
                        },
                        new
                        {
                            Id = 5,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7529), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 5,
                            QuestionId = 1,
                            Text = "Рязанская область"
                        },
                        new
                        {
                            Id = 6,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7530), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 6,
                            QuestionId = 1,
                            Text = "Владимирская область"
                        },
                        new
                        {
                            Id = 7,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7531), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 7,
                            QuestionId = 1,
                            Text = "Тульская область"
                        },
                        new
                        {
                            Id = 8,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7532), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 8,
                            QuestionId = 1,
                            Text = "Другой регион"
                        },
                        new
                        {
                            Id = 9,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7547), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 1,
                            QuestionId = 2,
                            Text = "18-30"
                        },
                        new
                        {
                            Id = 10,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7548), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 2,
                            QuestionId = 2,
                            Text = "30-45"
                        },
                        new
                        {
                            Id = 11,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7549), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 3,
                            QuestionId = 2,
                            Text = "45-60"
                        },
                        new
                        {
                            Id = 12,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7550), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 4,
                            QuestionId = 2,
                            Text = "60-70"
                        },
                        new
                        {
                            Id = 13,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7551), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 5,
                            QuestionId = 2,
                            Text = "Старше 70"
                        },
                        new
                        {
                            Id = 14,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7562), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 1,
                            QuestionId = 3,
                            Text = "Да"
                        },
                        new
                        {
                            Id = 15,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7563), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 2,
                            QuestionId = 3,
                            Text = "Нет"
                        });
                });

            modelBuilder.Entity("SurveyTesting.DataLayer.Models.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeleteDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("PassingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("Id", "UserId", "SurveyId");

                    b.ToTable("Interviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7427), new TimeSpan(0, 0, 0, 0, 0)),
                            PassingDate = new DateTimeOffset(new DateTime(2025, 3, 15, 13, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7430), new TimeSpan(0, 3, 0, 0, 0)),
                            SurveyId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("SurveyTesting.DataLayer.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeleteDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("Id", "SurveyId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7506), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 1,
                            SurveyId = 1,
                            Text = "В каком регионе Вы проживаете?"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7507), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 2,
                            SurveyId = 1,
                            Text = "Сколько вам лет?"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7508), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 3,
                            SurveyId = 1,
                            Text = "Готовы к переезду?"
                        });
                });

            modelBuilder.Entity("SurveyTesting.DataLayer.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<string>("AnswerText")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeleteDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InterviewId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("InterviewId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("Id", "InterviewId", "QuestionId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("SurveyTesting.DataLayer.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeleteDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Name");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTimeOffset(new DateTime(2025, 3, 15, 10, 13, 27, 436, DateTimeKind.Unspecified).AddTicks(7330), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Описание примера анкеты",
                            Name = "Пример анкеты"
                        });
                });

            modelBuilder.Entity("SurveyTesting.DataLayer.Models.Answer", b =>
                {
                    b.HasOne("SurveyTesting.DataLayer.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SurveyTesting.DataLayer.Models.Interview", b =>
                {
                    b.HasOne("SurveyTesting.DataLayer.Models.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SurveyTesting.DataLayer.Models.Question", b =>
                {
                    b.HasOne("SurveyTesting.DataLayer.Models.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SurveyTesting.DataLayer.Models.Result", b =>
                {
                    b.HasOne("SurveyTesting.DataLayer.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("SurveyTesting.DataLayer.Models.Interview", "Interview")
                        .WithMany()
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyTesting.DataLayer.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Interview");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SurveyTesting.DataLayer.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SurveyTesting.DataLayer.Models.Survey", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
